//
//  Variants
//
//  Copyright (c) Backbase B.V. - https://www.backbase.com
//  Created by Arthur Alves
//

import XCTest
import PathKit
@testable import VariantsCore

// swiftlint:disable function_body_length

fileprivate let parameters = [
    CustomProperty(name: "sample", value: "sample-value", destination: .project),
    CustomProperty(name: "sample-2", value: "sample-2-value", destination: .fastlane),
    CustomProperty(name: "sample-3", value: "sample-3-value", destination: .project),
    CustomProperty(name: "sample-4", value: "sample-4-value", destination: .fastlane),
    CustomProperty(name: "sample-5", value: "sample-5-value", destination: .fastlane),
    CustomProperty(name: "sample-env", value: "API_TOKEN", env: true, destination: .fastlane)
]

fileprivate let correctOutput =
    """
    # Generated by Variants
    VARIANTS_PARAMS = {
        sample-2: \"sample-2-value\",
        sample-4: \"sample-4-value\",
        sample-5: \"sample-5-value\",
        sample-env: ENV[\"API_TOKEN\"],
    }.freeze
    """

class FastlaneParametersFactoryTests: XCTestCase {
    func testRender_correctData() {
        guard
            let templateFilePath = Bundle(for: type(of: self))
                .path(forResource: "Resources/variants_params_template", ofType: "rb"),
            let templateFileContent = try? String(contentsOfFile: templateFilePath,
                                                  encoding: .utf8)
        else { return }
        
        // Assset we are able to write the template's content to a temporary
        // template in `private/tmp/`, to be used as `Path` from this test target.
        // Without this Path, `FastlaneParametersFactory` can't be tested as it
        // depends on `Stencil.FileSystemLoader` to load the template.
        let temporaryTemplatePath = Path("variants_params_template.rb")
        XCTAssertNoThrow(try temporaryTemplatePath.write(templateFileContent))
        
        let factory = FastlaneParametersFactory(templatePath: Path("./"))
        
        XCTAssertNoThrow(try factory.render(context: context(for: parameters),
                                            renderTemplate: StaticPath.Template.fastlaneParametersFileName))
        XCTAssertNotNil(try factory.render(context: context(for: parameters),
                                           renderTemplate: StaticPath.Template.fastlaneParametersFileName))
        
        do {
            if let renderedData = try factory.render(context: context(for: parameters),
                                                     renderTemplate: StaticPath.Template.fastlaneParametersFileName) {
                XCTAssertEqual(String(data: renderedData, encoding: .utf8), correctOutput)
            }
        } catch {
            XCTFail("'Try' should not throw - "+error.localizedDescription)
        }
    }
    
    func testFileWrite_correctOutput() {
        let basePath = Path("./")
        do {
            let fastlaneParametersPath = try Path("fastlane").safeJoin(path: Path("parameters/variants_params.rb"))
            if !fastlaneParametersPath.exists {
                XCTAssertNoThrow(try fastlaneParametersPath.mkpath())
            }
            
            let factory = FastlaneParametersFactory(templatePath: basePath)
            XCTAssertNoThrow(try factory.write(Data(correctOutput.utf8), using: fastlaneParametersPath))
            
            XCTAssertTrue(fastlaneParametersPath.exists)
            XCTAssertEqual(try fastlaneParametersPath.read(), correctOutput)
            
        } catch {
            XCTFail("'Try' should not throw - "+error.localizedDescription)
        }
    }
    
    func testFileWrite_appendingStore() {
        let expectedOutput =
            """
            # Generated by Variants
            VARIANTS_PARAMS = {
                sample-2: \"sample-2-value\",
                sample-4: \"sample-4-value\",
                sample-5: \"sample-5-value\",
                STORE_DESTINATION: \"testflight\",
                sample-env: ENV[\"API_TOKEN\"],
            }.freeze
            """
        
        let variant = iOSVariant(
            name: "sample-variant",
            app_icon: nil,
            id_suffix: "sample",
            version_name: "2.3.4",
            version_number: 99,
            signing: nil,
            custom: nil,
            store_destination: "TestFlight"
        )
        
        guard
            let templateFilePath = Bundle(for: type(of: self))
                .path(forResource: "Resources/variants_params_template", ofType: "rb"),
            let templateFileContent = try? String(contentsOfFile: templateFilePath,
                                                  encoding: .utf8)
        else { return }
        
        // Assset we are able to write the template's content to a temporary
        // template in `private/tmp/`, to be used as `Path` from this test target.
        // Without this Path, `FastlaneParametersFactory` can't be tested as it
        // depends on `Stencil.FileSystemLoader` to load the template.
        let temporaryTemplatePath = Path("variants_params_template.rb")
        XCTAssertNoThrow(try temporaryTemplatePath.write(templateFileContent))
        
        var fastlaneParameters = parameters.filter({ $0.destination == .fastlane })
        fastlaneParameters.append(variant.destinationProperty)
        let factory = FastlaneParametersFactory(templatePath: Path("./"))
        
        XCTAssertNoThrow(try factory.render(context: context(for: fastlaneParameters),
                                            renderTemplate: StaticPath.Template.fastlaneParametersFileName))
        XCTAssertNotNil(try factory.render(context: context(for: fastlaneParameters),
                                           renderTemplate: StaticPath.Template.fastlaneParametersFileName))
        
        do {
            if let renderedData = try factory.render(context: context(for: fastlaneParameters),
                                                     renderTemplate: StaticPath.Template.fastlaneParametersFileName) {
                XCTAssertEqual(String(data: renderedData, encoding: .utf8), expectedOutput)
            }
        } catch {
            XCTFail("'Try' should not throw - "+error.localizedDescription)
        }
    }
    
    private func context(for parameters: [CustomProperty]) -> [String: Any] {
        let fastlaneParameters = parameters.literal()
        let fastlaneEnvVars = parameters.envVars()
        guard !fastlaneParameters.isEmpty || !fastlaneEnvVars.isEmpty else { return [:] }
        
        let context = [
            "parameters": fastlaneParameters,
            "env_vars": fastlaneEnvVars
        ]
        return context
    }
}
// swiftlint:enable function_body_length

fileprivate extension Sequence where Iterator.Element == CustomProperty {
    func envVars() -> [CustomProperty] {
        return self
            .filter({ $0.destination == .fastlane && $0.isEnvironmentVariable })
            .map { (property) -> CustomProperty in
                return CustomProperty(name: property.name,
                                      value: property.environmentValue,
                                      destination: property.destination)
            }
    }
    
    func literal() -> [CustomProperty] {
        return self
            .filter({ $0.destination == .fastlane && !$0.isEnvironmentVariable })
    }
}
